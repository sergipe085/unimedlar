generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                    String  @id @default(cuid())
  nome                  String
  login                 String  @unique()
  senha                 String
  expoNotificationToken String?

  cuidador Cuidador? @relation(fields: [cuidadorId], references: [id])
  gerente  Gerente?  @relation(fields: [gerenteId], references: [id])

  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime?
  excluidoEm   DateTime?
  cuidadorId   String?   @unique
  gerenteId    String?   @unique

  @@index([login])
  @@map("usuarios")
}

model Procedimento {
  id           String                    @id @default(cuid())
  nome         String
  materiais    MaterialProcedimento[]
  valor        Float                     @default(0)
  atendimentos ProcedimentoAtendimento[]

  @@map("procedimentos")
}

model MaterialProcedimento {
  id                   String       @id @default(cuid())
  procedimento         Procedimento @relation(fields: [procedimentoId], references: [id])
  procedimentoId       String
  material             Material     @relation(fields: [materialId], references: [id])
  materialId           String
  quantidadeDeMaterial Float        @default(1)

  @@map("materiaisProcedimento")
}

model Material {
  id            String                 @id @default(cuid())
  nome          String
  valor         Float                  @default(0)
  procedimentos MaterialProcedimento[]

  @@map("materiais")
}

model Medicamento {
  id           String                    @id @default(cuid())
  nome         String
  catmat       String
  atendimentos ProcedimentoAtendimento[]

  @@map("medicamentos")
}

model Cuidador {
  id        String     @id @default(cuid())
  usuario   Usuario?
  pacientes Paciente[]
  chamados  Chamado[]

  @@map("cuidadores")
}

model Gerente {
  id      String   @id @default(cuid())
  usuario Usuario?

  @@map("gerentes")
}

model Paciente {
  id           String        @id @default(cuid())
  nome         String
  cpf          String
  cns          String
  endereco     String
  latitude     Float
  longitude    Float
  cuidador     Cuidador?     @relation(fields: [cuidadorId], references: [id])
  cuidadorId   String?
  atendimentos Atendimento[]
  Visita       Visita[]

  @@map("pacientes")
}

enum UrgenciaChamado {
  MUITO_ALTA
  ALTA
  MEDIA
  BAIXA
  MUITO_BAIXA
}

enum AssuntoChamado {
  SAUDE_DO_PACIENTE
  CARGA_HORARIA_DO_PROFFISIONAL
  COMPARECIMENTO_DO_PROFISSIONAL
  PROFISSIONAL_FEZ_O_QUE_DEVERIA
  QUALIDADE_DO_ATENDIMENTO
  TRATAMENTO_DO_PROFISSIONAL
  PROFISSIONALISMO_DO_PROFISSIONAL
  FINANCEIRO
  PLANO_DE_SAUDE
  OUTRO
}

enum StatusChamado {
  EM_ABERTO
  FECHADO
  CONCLUIDO
}

enum TipoChamado {
  RECLAMACAO
  ELOGIO
  OUTRO
}

model Chamado {
  id         String          @id @default(cuid())
  reclamacao String
  autor      Cuidador        @relation(fields: [autorId], references: [id])
  autorId    String
  urgencia   UrgenciaChamado
  assunto    AssuntoChamado
  tipo       TipoChamado     @default(OUTRO)
  status     StatusChamado   @default(EM_ABERTO)

  realizadoEm  DateTime  @default(now())
  finalizadoEm DateTime?

  @@map("chamados")
}

model Cooperativa {
  id           String        @id @default(cuid())
  nome         String
  emailGerente String
  senhaGerente String
  atendimentos Atendimento[]
  visitas      Visita[]

  @@map("cooperativas")
}

enum TiposProfissionais {
  ENFERMEIRO
  MEDICO
  TERAPEUTA
  FISIOTERAPEUTA
}

enum Turno {
  MANHA
  TARDE
  NOITE
}

enum StatusAtendimento {
  REQUISITADO
  EM_ANDAMENTO
  FINALIZADO
  CANCELADO
}

model Atendimento {
  id                       String                    @id @default(cuid())
  titulo                   String
  dataInicial              DateTime
  dataFinal                DateTime
  paciente                 Paciente                  @relation(fields: [pacienteId], references: [id])
  pacienteId               String
  intervaloEmDia           Float
  duracaoEmHoras           Float                     @default(0)
  procedimentos            ProcedimentoAtendimento[]
  visitas                  Visita[]
  profissionaisNecessarios TiposProfissionais[]
  turno                    Turno                     @default(MANHA)
  status                   StatusAtendimento         @default(REQUISITADO)
  cooperativaResponsavel   Cooperativa?              @relation(fields: [cooperativaId], references: [id])
  cooperativaId            String?

  @@map("atendimentos")
}

enum TipoVisita {
  PLANEJADA
  FLUTUANTE
}

model Visita {
  id                     String           @id @default(cuid())
  avaliacao              AvaliacaoVisita? @relation(fields: [avaliacaoVisitaId], references: [id])
  atendimento            Atendimento?     @relation(fields: [atendimentoId], references: [id])
  paciente               Paciente         @relation(fields: [pacienteId], references: [id])
  dataVisita             DateTime
  turno                  Turno            @default(MANHA)
  tipo                   TipoVisita       @default(PLANEJADA)
  cooperativaResponsavel Cooperativa?     @relation(fields: [cooperativaId], references: [id])
  cooperativaId          String?

  compareceuEm    DateTime?
  naoCompareceuEm DateTime?

  avaliacaoVisitaId String? @unique
  atendimentoId     String?
  pacienteId        String

  @@map("visitas")
}

model AvaliacaoVisita {
  id                              String   @id @default(cuid())
  visita                          Visita?
  nota                            Int
  feedback                        String?
  profissionalCompareceu          Boolean?
  profissionalCumpriuCargaHoraria Boolean?
  atualizadaEm                    DateTime @default(now()) @updatedAt

  @@map("avaliacoesVisita")
}

model ProcedimentoAtendimento {
  id             String        @id @default(cuid())
  atendimento    Atendimento   @relation(fields: [atendimentoId], references: [id])
  atendimentoId  String
  procedimento   Procedimento? @relation(fields: [procedimentoId], references: [id])
  procedimentoId String?
  medicamento    Medicamento?  @relation(fields: [medicamentoId], references: [id])
  medicamentoId  String?
  quantidade     Float         @default(1)
  duracaoEmHoras Float         @default(0)

  @@map("procedimentosAtendimento")
}
